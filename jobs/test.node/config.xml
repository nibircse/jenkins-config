<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.8">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>#!groovy

notifyBuildDetails = &quot;&quot;
subosCommitId = &quot;&quot;
serenityReportDir = &quot;&quot;
snapBuildTime = &quot;&quot;
agentVersion = &quot;&quot;

try {
	// notifyBuild(&apos;STARTED&apos;)
	node() {
		// /* Building snap */
		// deleteDir()

		// stage(&quot;Checkout source&quot;)
		// /* checkout agent repo */
		// notifyBuildDetails = &quot;\nFailed on Stage - Checkout source&quot;

		// checkout scm

		// subosCommitId = sh (script: &quot;git rev-parse HEAD&quot;, returnStdout: true)
		// serenityReportDir = &quot;/var/lib/jenkins/www/serenity/${subosCommitId}&quot;

		// stage(&quot;Build snap package&quot;)
		// /* Build snap package based on autobuild.sh script */
		// notifyBuildDetails = &quot;\nFailed on Stage - Build snap package&quot;

		// /* get agent version */
		// agentVersion = sh (script: &quot;cat subutai/etc/agent.gcfg | grep version | cut -d &apos; &apos; -f3&quot;, 
		// 	returnStdout: true)

		// /* change export path to current directory */
		// sh &quot;&quot;&quot;
		// 	sed &apos;s/EXPORT_DIR=.*/EXPORT_DIR=./g&apos; -i subutai/etc/agent.gcfg
		// &quot;&quot;&quot;

		// /* build snap */
		// String buildOutput = sh (script: &quot;&quot;&quot;
		// 	./autobuild.sh -b
		// 	&quot;&quot;&quot;, returnStdout: true)

		// snapBuildTime = sh (script: &quot;&quot;&quot;
		// 	echo ${buildOutput} | cut -d &apos;-&apos; -f2 | cut -d &apos;_&apos; -f1
		// 	&quot;&quot;&quot;, returnStdout: true)


		// /* rename built snap */
		// sh &quot;&quot;&quot;
		// 	mv (echo $out | cut -d \&apos; -f 2) subutai_${agentVersion}_amd64-${env.BRANCH_NAME}.snap
		// &quot;&quot;&quot;

		// /* stash snap to use it in next node() */
		// stash includes: &apos;subutai_*.snap&apos;, name: &apos;snap&apos;

	}
	// node() {
	// 	/* Running Integration tests only on dev branch */
	// 	deleteDir()
	// 	if (env.BRANCH_NAME == &apos;jenkinsfile&apos;) {
	// 		stage(&quot;Update test node&quot;)
	// 		/* Update test node */
	// 		notifyBuildDetails = &quot;\nFailed on Stage - Update test node&quot;

	// 		unstash &apos;snap&apos;

	// 		/* destroy existing management template on test node */
	// 		sh &quot;&quot;&quot;
	// 			set +x
	// 			ssh root@${env.SS_TEST_NODE} &lt;&lt;- EOF
	// 			set -e
	// 			subutai destroy everything
	// 			if test -f /var/lib/apps/subutai/current/p2p.save; then rm /var/lib/apps/subutai/current/p2p.save; fi
	// 			systemctl restart subutai_p2p_*.service
	// 			rm /mnt/lib/lxc/tmpdir/management-subutai-template_*
	// 		EOF&quot;&quot;&quot;

	// 		/* copy built snap on test node */
	// 		sh &quot;&quot;&quot;
	// 			set +x
	// 			scp subutai_*.snap root@${env.SS_TEST_NODE}:/tmp/subutai_subos_builder.snap
	// 		&quot;&quot;&quot;

	// 		// install generated management template
	// 		sh &quot;&quot;&quot;
	// 			set +x
	// 			rm /var/lib/apps/subutai/current/agent.gcfg
	// 			snappy install /tmp/subutai_subos_builder.snap --allow-unauthenticated
	// 			ssh root@${env.SS_TEST_NODE} &lt;&lt;- EOF
	// 			set -e
	// 			echo y | subutai import management
	// 		EOF&quot;&quot;&quot;

	// 		/* wait until SS starts */
	// 		timeout(time: 5, unit: &apos;MINUTES&apos;) {
	// 			sh &quot;&quot;&quot;
	// 				set +x
	// 				echo &quot;Waiting SS&quot;
	// 				while [ \$(curl -k -s -o /dev/null -w %{http_code} &apos;https://${env.SS_TEST_NODE}:8443/rest/v1/peer/ready&apos;) != &quot;200&quot; ]; do
	// 					sleep 5
	// 				done
	// 			&quot;&quot;&quot;
	// 		}

	// 		stage(&quot;Integration tests&quot;)
	// 		/* Running test, copy tests result to www directory */
	// 		notifyBuildDetails = &quot;\nFailed on Stage - Integration tests\nSerenity Tests Results:\n${env.JENKINS_URL}serenity/${subosCommitId}&quot;
	// 		sh &quot;&quot;&quot;
	// 			set +e
	// 			./run_tests_qa.sh -m ${env.SS_TEST_NODE}
	// 			./run_tests_qa.sh -s all
	// 			${mvnHome}/bin/mvn integration-test -Dwebdriver.firefox.profile=src/test/resources/profilePgpFF
	// 			OUT=\$?
	// 			${mvnHome}/bin/mvn serenity:aggregate
	// 			cp -rl target/site/serenity ${serenityReportDir}
	// 			if [ \$OUT -ne 0 ];then
	// 				exit 1
	// 			fi
	// 		&quot;&quot;&quot;
	// 	}
	// }
	// node() {
	// 	deleteDir()
	// 	stage(&quot;Upload built snap to kurjun&quot;)
	// 	notifyBuildDetails = &quot;\nFailed on Stage - Upload built snap to kurjun&quot;

	// 	unstash &apos;snap&apos;
	// 	String filename = &quot;subutai_${agentVersion}_amd64-${env.BRANCH_NAME}.snap&quot;

	// 	/* cdn auth creadentials */
	// 	String url = &quot;https://eu0.cdn.subut.ai:8338/kurjun/rest&quot;
	// 	String user = &quot;jenkins&quot;
	// 	def authID = sh (script: &quot;&quot;&quot;
	// 		set +x
	// 		curl -s -k ${url}/auth/token?user=${user} | gpg --clearsign --no-tty
	// 		&quot;&quot;&quot;, returnStdout: true)
	// 	def token = sh (script: &quot;&quot;&quot;
	// 		set +x
	// 		curl -s -k -Fmessage=\&quot;${authID}\&quot; -Fuser=${user} ${url}/auth/token
	// 		&quot;&quot;&quot;, returnStdout: true)

	// 	/* Upload snap to kurjun */
	// 	String responseSnap = sh (script: &quot;&quot;&quot;
	// 		set +x
	// 		curl -s -k https://eu0.cdn.subut.ai:8338/kurjun/rest/raw/info?name=${filename}
	// 		&quot;&quot;&quot;, returnStdout: true)
	// 	sh &quot;&quot;&quot;
	// 		set +x
	// 		curl -s -k -Ffile=@${filename} -Ftoken=${token} ${url}/raw/upload
	// 	&quot;&quot;&quot;

	// 	/* delete old snap */
	// 	if (responseSnap != &quot;Not found&quot;) {
	// 		def jsonSnap = jsonParse(responseSnap)
	// 		sh &quot;&quot;&quot;
	// 			set +x
	// 			curl -s -k -X DELETE ${url}/apt/delete?id=${jsonSnap[&quot;id&quot;]}&apos;&amp;&apos;token=${token}
	// 		&quot;&quot;&quot;
	// 	}
	// }
} catch (e) { 
	currentBuild.result = &quot;FAILED&quot;
	throw e
} finally {
	// Success or failure, always send notifications
	notifyBuild(currentBuild.result, notifyBuildDetails)
}

// // https://jenkins.io/blog/2016/07/18/pipline-notifications/
// def notifyBuild(String buildStatus = &apos;STARTED&apos;, String details = &apos;&apos;) {
// 	// build status of null means successful
// 	buildStatus = buildStatus ?: &apos;SUCCESSFUL&apos;

// 	// Default values
// 	def colorName = &apos;RED&apos;
// 	def colorCode = &apos;#FF0000&apos;
// 	def subject = &quot;${buildStatus}: Job &apos;${env.JOB_NAME} [${env.BUILD_NUMBER}]&apos;&quot;  	
// 	def summary = &quot;${subject} (${env.BUILD_URL})&quot;

// 	// Override default values based on build status
// 	if (buildStatus == &apos;STARTED&apos;) {
// 		color = &apos;YELLOW&apos;
// 		colorCode = &apos;#FFFF00&apos;  
// 	} else if (buildStatus == &apos;SUCCESSFUL&apos;) {
// 		color = &apos;GREEN&apos;
// 		colorCode = &apos;#00FF00&apos;
// 	} else {
// 		color = &apos;RED&apos;
// 		colorCode = &apos;#FF0000&apos;
// 		summary = &quot;${subject} (${env.BUILD_URL})${details}&quot;
// 	}
// 	// Get token
// 	def slackToken = getSlackToken(&apos;sysnet-bots-slack-token&apos;)
// 	// Send notifications
// 	withCredentials([string(credentialsId: &apos;sysnet-bots-slack-token&apos;, variable: &apos;slackToken&apos;)]) {
//     	//slackSend (color: colorCode, message: summary, teamDomain: &apos;subutai-io&apos;, token: &quot;${slackToken}&quot;)
// 	}
// }

// @NonCPS
// def jsonParse(def json) {
//     new groovy.json.JsonSlurperClassic().parseText(json)
// }
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>